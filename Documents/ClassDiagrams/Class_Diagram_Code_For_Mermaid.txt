---
config:
  class:
    hideEmptyMembersBox: true
  layout: elk
  look: classic
  theme: mc
---
classDiagram
direction LR
    class Server {
	    private static ConcurrentHashMap<String, BackgroundHandlerServer> clients
        private static Database data
        private static ServerSocket server
        private static RqstStore requestStore
        private static final int PORT

        public static void main(String[] args) throws IOException
        private static void initialStartUp() throws IOException
        private static String getHostAddr() throws SocketException
        protected static Login checkLoginStatus(Login login)
        protected void sendMsgHistory(String userName, String chatName) throws IOException
        protected void sendAllUsers(String userName) throws IOException
        protected void sendChat(String userName, String chatName) throws IOException
        protected void sendMsg(String userName, Message msg) throws IOException
        protected void pushStore(Message msg) throws ClassNotFoundException
        protected void pushStore(Chat ch) throws ClassNotFoundException
        protected Object popStore()
        protected Chat getChat(String chatName)
        protected void logoutHandler(String username)
    }
    class Client {
	    private static Socket socket
        private static ObjectOutputStream out
        private static ObjectInputStream in
        private static Account account
        private static String[] userList
        private static ChatAppGUI display
        private static RqstStore requestStore
        private static List<Chat> chats
        private static Thread background
        private static Thread outgoing
        private static Thread incoming

	    public static void main(String[] args)
        public static void startSocket(String host) throws UnknownHostException, IOException
        public static void closeSocket()
        public static void cleanUpOnLogout()
        public void sendMsg(Message msg)
        public List<Chat> getChats()
        public String[] getUserList()
        public Account getUserAccount()
        public static void display()
        public static void startClientThreads()
        public static void stopClientThreads()
        public LoginType login(String username, String password)
        public static void getChatFromServer()
        public static void getUserNamesFromServer()
        public static ArrayList<String> searchUserList(String partialName)
        public void makeChat(String[] users, String chatname)
    }
    class Database {
	    private HashMap<String, Account> acctNameObjMap
        private HashMap<String, Chat> chatNameObjMap
        public static final String USERS_PATH
        public static final String CHATS_DIR
        private HashMap<String, HashSet<String>> userChatMap

        public Database() throws IOException
        public List<Message> getMessages(String accountName, LocalDateTime ldt)
        public void saveMessage(Message msg) throws IOException
        public Chat getChat(String chatName)
        public List<Chat> getChats(String accountName)
        public void addChat(String[] userList, String chatName) throws IOException
        public Account getAccount(String name)
        public List<Account> getAccounts()
    }
    class GUITools {
        public static void ColorGUIComponents(Object object)
        private static void applyToAllChildren(Container container)
    }
    class RqstStore {
	    private BlockingQueue<Object> incoming;
        private BlockingQueue<Object> outgoing;

        public RqstStore()
        public Object getIncoming() throws InterruptedException
        public void addToIncoming(Object obj) throws InterruptedException
        public Object getOutgoing() throws InterruptedException
        public void addToOutGoing(Message msg) throws InterruptedException
        public void addToOutGoing(Chat chat) throws InterruptedException
    }
    class Message["Message implements Serializable"] {
	    private String msg;
	    private LocalDateTime time
	    private String accountName
	    private String chatname

        public Message(String msg, String accountName, String chatname)
        public Message(String msg, String accountName, String chatname, LocalDateTime time)
        public String getMsg()
        public LocalDateTime getTime()
        public String getAccountName()
        public String getChatname()
        public String toString()
    }
    class Login["Login implements Serializable"] {
	    private LoginType loginType;
        private String username
        private String password

        public Login(String username, String password)
        public Login(LoginType loginType)
        public String getUsername()
        public String getPassword()
        public LoginType getLoginStatus()
    }
    class LoginScreen["LoginScreen extends Client"] {
        private JPanel mainPanel
        private JFrame frame
        private JButton loginButton
        private JPanel titlePanel
        private JPanel secondaryPanel
        private JTextField userNameField
        private JTextField passwordField
        private JLabel messageLabel
        private boolean success
        private Runnable runOnSuccess

        public LoginScreen(Runnable runOnSuccess)
        private void doLogin()
        public boolean getLoginStatus()
    }
    class BackgroundHandlerServer["BackgroundHandlerServer extends Server implements Runnable"] {
	    private ObjectOutputStream out
        private ObjectInputStream in
        private final Socket conn
        private String userKey

        public BackgroundHandlerServer(Socket conn)
        Public void run()
    }
    class RqstHandler["RqstHandler extends Server implements Runnable"] {
        public RqstHandler()
        public void run()
    }
    class BackgroundHandlerClient["BackgroundHandlerClient implements Runnable"] {
	    public BackgroundHandlerClient()
        public void run()
    }
    class IncomingHandler["IncomingHandler implements Runnable"] {
        public IncomingHandler()
        public void run()
    }
    class OutgoingHandler["OutgoingHandler implements Runnable"] {
        public OutgoingHandler()
        public void run()
    }
    class Chat["Chat implements Serializable"] {
	    private List<Message> msgHistory
        private String chatName
        private List<String> usersNames
	    
	    public Chat(String[] usersNames, String chatName)
        public Chat(String[] usersNames, Message[] msgHistory, String chatName)
	    public String getChatName()
        public String[] getUsersNames()
        public void addMessage(Message msg)
        public Message[] getMsgHistory()
    }
    class ChatAppGUI["ChatAppGUI extends Client"] {
        private JFrame frame
        private CardLayout cards
        private JPanel root
        private JTextField usernameField
        private JPasswordField passwordField
        private JTextField addressField
        private JLabel loginError
        private String currentUsername
        private JLabel userLabel
        private DefaultListModel<String> chatListModel
        private JList<String> chatList
        private DefaultListModel<String> userListModel
        private JList<String> userList
        private JTextArea historyArea
        private JTextField messageField
        private JLabel chatTitle
        private JLabel chatError
        private Chat currentChat

        public ChatAppGUI()
        public void addChatToList(String chatName)
        public void appendMessage(String line)
        public void init()
        private JPanel buildLoginPanel()
        private JPanel buildChatPanel()
        private void doLogin()
        private void doLogout()
        private void loadSelectedChat()
        private void sendMessage()
        private void showNewChatDialog()
        private void populateSearchModel(ArrayList<String> newChatUsers, DefaultListModel<String> searchModel)
        private void addUserToNewChat(JList<String> searchList, DefaultListModel<String> searchModel, ArrayList<String> newChatUsers, JTextField searchIn, JTextField usersIn)
        private void createNewChat(JDialog dlg, ArrayList<String> newChatUsers, JTextField nameIn)
    }
    class Account["Account implements Serializable"] {
        Private Role role
	    Private String name
	    Static Private int counter
	    Private int ID

	    Public Account(Role role, String name, String password)
	    Public void setRole(Role role)
	    Public void setName(String name)
        Public void setPassword(String password)
	    Public Role getRole()
	    Public String getName()
	    Public int getID()
    }
    class GUI {
	    Private Client client
	    Public GUI(Client)
	    Public void loginScreen()
	    Public void mainScreen()
    }
    class Role {
	    Administrator
	    Employee
    }
    class LoginType {
        SUCCESS
        LOGGED_IN
        FAILURE
    }

    Server "0..250000" *-- "1" Client
    Server "1" o-- "1" Database
    Server "1" o-- "1" RqstStore
    Server "1" *-- "0..1" Message
    Server "0..* {Unique}" -- "1" Login
    Server "1" -- "1" LoginType
    Server "1" -- "1" BackgroundHandlerServer
    Server "1" -- "1" RqstHandler
    Client "1" -- "1" BackgroundHandlerClient
    Client "1" -- "1" IncomingHandler
    Client "1" -- "1" OutgoingHandler
    Client "1" *-- "0..1" Message
    Client "1" o-- "1" RqstStore
    Client "0..* {Unique}" -- "1" Login
    Client "0..* {Unique}" o-- "1" Chat
    Client "1" o-- "1" GUI
    Client "1" o-- "1" Account
    Client "1" *-- "1" ChatAppGUI
    Client "1" *-- "1" LoginScreen
    Client "1" -- "1" LoginType
    ChatAppGUI "1" *-- "1" GUITools
    Account "1" -- "1" Role
    Database "1" -- "1" Account
    Database "1" *-- "0..1" Message
    Database "0..* {Unique}" o-- "1" Chat
